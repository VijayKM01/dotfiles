# vi: ft=zsh
## Functions
# Some of this was stolen, amongst others, from https://github.com/SmartFinn/dotfiles. Thanks!

src_update() {
	dirs=(
		/home/fra/.config/brave_plugins/vimium
		/home/fra/.local/src/subs
		/home/fra/.local/src/dwm
		/home/fra/.local/src/dwmblocks
		/home/fra/.local/src/st
	)

	for dir in $dirs; do
		git -C "$dir" rev-parse --is-inside-work-tree >/dev/null 2>&1 || continue
		printf '%s: ' "$dir:t"
		git -C "$dir" remote -v | grep -q upstream && { git -C "$dir" fetch upstream || printf '%s: Could not fetch upstream...\n' "$dir:t" }
		{ git -C "$dir" pull 2>/dev/null || echo "Unable to upgrade." }
	done
}

_run() {
	# run command if it exists
	local -a saved_cmd=("$@")

	case "$1" in
		sudo) shift 1 ;;
	esac

	if command -v "$1" >/dev/null; then
		echo "\e[1;32m =>\e[0m" "${saved_cmd[@]}" >&2
		"${saved_cmd[@]}"
	fi
}

# Updates
up2date() {
	_run yay -Syu
	_run nvim +PlugUpdate +quitall
	_run pipx upgrade-all
	_run zsh_update_plugins
	_run src_update $dirs
}


extract() {
	if [ ! -f "$1" ]; then
		printf "extract: '%s' is not a file\n" "$1" >&2
		return 1
	fi

	case "$1" in
		*.tar)  tar -xf "$1"       ;;
		*.tar.bz|*.tbz| \
		*.tar.bz2|*.tbz2)
				tar -xjf "$1"      ;;
		*.tar.gz|*.tgz)
				tar -xzf "$1"      ;;
		*.tar.xz|*.txz)
				tar -xJf "$1"      ;;
		*.tar.[zZ]|*.t[zZ])
				tar -xZf "$1"      ;;
		*.tar.lz|*.tlz| \
		*.tar.lzma|*.tlzma| \
		*.tar.lzo|*.tzo| \
		*.tar.zst|*.tzst)
				tar -xaf "$1"      ;;
		*.7z)   7za x -- "$1"      ;;
		*.a|*.ar)
				ar x -- "$1"       ;;
		*.ace)  unace e -- "$1"    ;;
		*.alz)  unalz -- "$1"      ;;
		*.arc|*.ark|*.ARC|*.ARK)
				nomarch -- "$1"    ;;
		*.arj|*.ARJ)
				arj e -r -- "$1"   ;;
		*.bz|*.bz2)
				bunzip2 -k -- "$1" ;;
		*.cab|*.CAB|*.exe|*.EXE)
				cabextract "$1"    ;;
		*.cpio) cpio -id -F "$1"   ;;
		*.deb)  dpkg -x -- "$1" .  ;;
		*.gz)   gunzip -k "$1"     ;;
		*.lha|*.lzh)
				lha x "$1"         ;;
		*.lrz|*.lrzip|*.rz)
				lrunzip -- "$1"    ;;
		*.lz)   lzip -d -k -- "$1" ;;
		*.lz4)  unlz4 -- "$1"      ;;
		*.lzma) xz -d -k "$1"      ;;
		*.lzo)  lzop -x "$1"       ;;
		*.rar)  unrar x -- "$1"    ;;
		*.src.rpm|*.rpm|*.spm)
				rpm2cpio "$1" | cpio -dium ;;
		*.xz)   unxz -k -- "$1"    ;;
		*.[zZ]) uncompress -- "$1" ;;
		*.zip)  unzip -- "$1"      ;;
		*.zst)  unzstd -- "$1"     ;;
		*.AppImage) ./"$1" --appimage-extract ;;
		*)
			printf "extract: '%s' - unkwown archive format\n" "$1" >&2
			return 1
	esac
}

archive() {
	local archive="$1"; shift

	if [ ! -e "$1" ]; then
		printf "usage: compress <ARCHIVE> [FILE...]\n" >&2
		return 1
	fi

	case "$archive" in
		*.tar.bz|*.tbz| \
		*.tar.bz2|*.tbz2)
			tar -cjf "$archive" "$@" ;;
		*.tar.gz|*.tgz)
			tar -czf "$archive" "$@" ;;
		*.tar.xz|*.txz)
			tar -cJf "$archive" "$@" ;;
		*.tar.[zZ]|*.t[zZ])
			tar -cZf "$archive" "$@" ;;
		*.tar.lzma|*.tlzma| \
		*.tar.lzo|*.tzo| \
		*.tar.lz|*.tlz)
			tar -caf "$archive" "$@" ;;
		*.tar)
			tar -cf  "$archive" "$@" ;;
		*.7z)
			7za a    "$archive" "$@" ;;
		*.zip)
			zip -r   "$archive" "$@" ;;
		*)
			printf "'%s' is unknown archive format\n" "$archive" >&2
			return 1
	esac
}

# Update the list of processes by pressing CTRL-R
lps() {
ps -ef | fzf --bind 'ctrl-r:reload(ps -ef)' --header 'Press CTRL-R to reload' \
	 --header-lines=1 --layout=reverse
}

most-used-commands() {
	local -i top="${1:-10}"
	local -i last="${2:-999999}"

	tail -n "$last" "${HISTFILE:-${ZDOTDIR:-$HOME}/.zsh_history}" \
		| awk '
			{ $1 == "sudo" ? CMD[$2]++ : CMD[$1]++; count++; }
			END {
				for (a in CMD)
					print CMD[a] " " CMD[a]/count*100 "% " a;
				}' \
		| sort -nr \
		| head -n "$top" \
		| column -c2 -s " " -t \
		| nl
}

# xdg-open wrapper
xopen() {
	xdg-open "$@" >/dev/null 2>&1
}

logzsh() {
	zsh -xv 2>&1 | ts -i "%.s" > zshstartup.log
	exit
	sort --field-separator=' ' -r -k1 zshstartup.log > sorted.log
}

zsh_bench() {
	for _ ({1..10}); time zsh -i -c exit
}

function 256col {
	for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
}

xrescol() {
read -r -d '' -A colors \
    < <( xrdb -query | sed -n 's/.*color\([0-9]\)/\1/p' | sort -nu | cut -f2)
printf '\e[1;37m
 Black      Red        Green      Yellow     Blue       Magenta    Cyan       White
───────────────────────────────────────────────────────────────────────────────────────\e[0m\n'

for color in {0..7}; do printf "\e[$((30+color))m █ %s \e[0m" "${colors[color+1]}"; done
printf '\n'
for color in {8..15}; do printf "\e[1;$((22+color))m █ %s \e[0m" "${colors[color+1]}"; done
printf '\n'
}

truecolor() {
	awk 'BEGIN{
	    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
	    for (colnum = 0; colnum<77; colnum++) {
		r = 255-(colnum*255/76);
		g = (colnum*510/76);
		b = (colnum*255/76);
		if (g>255) g = 510-g;
		printf "\033[48;2;%d;%d;%dm", r,g,b;
		printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
		printf "%s\033[0m", substr(s,colnum+1,1);
	    }
	    printf "\n";
	}'
}

# a simple password generator
genpasswd() {
	# usage: genpasswd [-adhps] [length [count]]
	local -i human_readable=0
	local chars=""

	while getopts "adhps" opt; do
		case "$opt" in
			a) chars+="[:alnum:]" ;;
			d) chars+="[:digit:]" ;;
			p) chars+="[:punct:]" ;;
			s) chars+="[:graph:]" ;;
			h) human_readable=1   ;;
		esac
	done
	shift $((OPTIND - 1))

	local -i length="${1:-8}"
	local -i count="${2:-1}"

	if [ "$human_readable" -eq 1 ]; then
		command -v apg >/dev/null || return 1
		apg -c /dev/urandom -m "$length" -n "$count" -E oOlL10
	else
		< /dev/urandom \
			| tr -dc "${chars:-[:alnum:]}" \
			| fold -w "$length" \
			| head -n "$count"
	fi
}

## ffmpeg utilities
compress() {
	ffmpeg -i $1 -vcodec h264 -acodec mp3 $2
}
compressbrate() {
	bitrate=${3:-1000k}
	ffmpeg -i $1 -vcodec h264 -b:v $bitrate -acodec mp3 $2
}

# create a new directory and enter it
md() { mkdir -p "$1" && cd "$1"; }

# fuzzy-find manuals
manfd() {
    export MANPATH="/usr/share/man"
    f=$(fd . $MANPATH/man${1:-1} -t f -x echo {/.} | fzf --preview 'man {}'  ) && man $f
}

# find inside manuals
fman() {
    man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

## pdf utils
img2pdf() {
while read file; do
filebase=$(basename $file | cut -d'.' -f1)
convert -density 300 -quality 100 $file $file.pdf
done <<< $(ls)
}
pdfsearch() {
	command -v pdftotext >/dev/null && mkdir -p tmpd; ls *.pdf | while read file; do pdftotext $file tmpd/$file.txt; done; cd tmpd && rg $1 && cd .. && rm -rf tmpd || echo 'Error!'
}
compresspdf() {
gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dBATCH  -dQUIET -sOutputFile=$2.pdf $1
}

# A wget wrapper
download_files_from_page() {
	if [ "$#" -lt 2 ]; then
		cat <<- EOF
		Download all files with specific extension on a webpage
		Usage: $0 extension[,extension...] URL
		Example:
		$0 mp4 http://example.com/files/
		$0 mp3,ogg,wma http://samples.com/files/
		Google: http://lmgtfy.com/?q=intitle%3Aindex.of+mp3+-html+-htm+-php+-asp+-txt+-pls+madonna
		based on http://stackoverflow.com/a/18709707
		EOF

		return 1
	fi

	outputdir_name="$(awk -F/ '{print $(NF-1);}' <<< "$1")"
	mkdir -pv "$outputdir_name"
	cd "$outputdir_name" && wget -r -l1 -H -t1 -nd -N -np -A "$1" -erobots=off "$2"
}

escape() {
    # Uber useful when you need to translate weird as fuck path into single-argument string.
    local escape_string_input
    echo -n "String to escape: "
    read escape_string_input
    printf '%q\n' "$escape_string_input"
}

confirm() {
    local answer
    echo -ne "zsh: sure you want to run '${YELLOW}$*${NC}' [yN]? "
    read -q answer
        echo
    if [[ "${answer}" =~ ^[Yy]$ ]]; then
        command "${@}"
    else
        return 1
    fi
}

confirm_wrapper() {
    if [ "$1" = '--root' ]; then
        local as_root='true'
        shift
    fi

    local prefix=''

    if [ "${as_root}" = 'true' ] && [ "${USER}" != 'root' ]; then
        prefix="sudo"
    fi
    confirm ${prefix} "$@"
}

# stolen with the above from https://github.com/slashbeast/conf-mgmt/blob/master/roles/home_files/files/DOTzshrc
poweroff() { confirm_wrapper --root $0 "$@"; }
reboot() { confirm_wrapper --root $0 "$@"; }
hibernate() { confirm_wrapper --root $0 "$@"; }
